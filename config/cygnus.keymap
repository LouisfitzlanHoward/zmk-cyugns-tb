#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    macros {
        dongle_bootload_macro: bootload_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
            label = "BOOTLOAD_MACRO";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 3>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
            timeout-ms = <50>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
            timeout-ms = <50>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <27 28>;
            timeout-ms = <50>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <31 32>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 6>;
            timeout-ms = <50>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <17 18>;
            timeout-ms = <50>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "tap-preferred";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
&hm EXCLAMATION Q  &hm AT_SIGN W  &hm HASH E     &hm DOLLAR R    &hm PERCENT T  &as CARET Y         &hm AMPERSAND U      &hm ASTERISK I          &hm LEFT_PARENTHESIS O  &hm RIGHT_PARENTHESIS P
&hm LC(A) A        &hm MINUS S    &hm EQUAL D    &hm HOME F      &kp ENTER      &hm LEFT_BRACKET G  &hm RIGHT_BRACKET H  &hm NON_US_BACKSLASH J  &hm SEMICOLON K         &hm APOSTROPHE L
&hm LC(Z) Z        &hm LC(X) X    &hm LC(C) C    &mkp LCLK       &mkp RCLK      &hm LC(V) V         &kp B                &hm COMMA N             &hm PERIOD M            &as QUESTION SLASH
                                  &hm GRAVE ESC  &kp LEFT_SHIFT  &ltq 1 SPACE                       &hm CAPSLOCK TAB     &kp BACKSPACE
            >;
        };

        Lower {
            label = "Lower";
            bindings = <
&kp NUMBER_1    &kp NUMBER_2    &kp NUMBER_3     &kp NUMBER_4  &kp N5  &kp NUMBER_6    &kp N7           &kp N8         &kp N9            &kp NUMBER_0
&kp UP_ARROW    &kp UNDERSCORE  &kp PLUS         &kp DELETE    &trans  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp PIPE       &kp COLON         &kp DOUBLE_QUOTES
&kp DOWN_ARROW  &kp LEFT_ARROW  &kp RIGHT_ARROW  &trans        &trans  &trans          &bt BT_CLR       &kp LESS_THAN  &kp GREATER_THAN  &kp QUESTION
                                &kp TILDE        &trans        &trans                  &trans           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        game {
            if-layers = <2 2>;
            then-layer = <2>;
        };
    };
};
